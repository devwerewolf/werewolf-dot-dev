// Generated by CoffeeScript 1.9.2
// üê∫
(function() {
  var MoonWorker,
    blank_promise, 
    slice = [].slice;

  window.MoonScript || (window.MoonScript = {});

  MoonWorker = (function() {
    MoonWorker.prototype.id = 0;

    function MoonWorker() {
      this.worker = new Worker("moonscript/worker.js");
      this.listeners = {};
      this.worker.onmessage = (function(_this) {
        return function(e) {
          var fn, ref1, result, return_id;
          ref1 = e.data, return_id = ref1[0], result = ref1[1];
          if (_this.listeners[return_id] != null) {
            fn = _this.listeners[return_id];
            return fn(result);
          }
        };
      })(this);
    }

    MoonWorker.prototype.send = function() {
      var args, send_id;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      send_id = this.id;
      this.id += 1;
      this.worker.postMessage([send_id].concat(slice.call(args)));
      return new Promise((function(_this) {
        return function(resolve) {
          return _this.listen(send_id, resolve);
        };
      })(this));
    };

    MoonWorker.prototype.listen = function(id, fn) {
      return this.listeners[id] = fn;
    };

    return MoonWorker;

  })();

  MoonScript.get_worker = function() {
    return MoonScript.worker || (MoonScript.worker = new MoonWorker);
  };

  blank_promise = new Promise(function(r) {
    return r("");
  });

  MoonScript.compile = function(code) {
    var worker;
    if (code === "") {
      return blank_promise;
    }
    worker = MoonScript.get_worker();
    return worker.send("compile", code);
  };

  MoonScript.execute = function(code) {
    var worker;
    if (code === "") {
      return blank_promise;
    }
    worker = MoonScript.get_worker();
    return worker.send("execute", code);
  };

  MoonScript.get_version = function() {
    return MoonScript.execute("print require('moonscript.version').version");
  };
}).call(this);